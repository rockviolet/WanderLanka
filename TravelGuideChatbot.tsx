"use client";
import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Loader2, Send, User, Bot, Download } from "lucide-react";
import { toast } from "sonner";
import jsPDF from "jspdf";
import { autoTable } from "jspdf-autotable";

type Message = {
  role: "user" | "assistant";
  content: string;
};

export default function TravelGuideChatbot() {
  const [messages, setMessages] = useState<Message[]>([
    {
      role: "assistant",
      content:
        "Hello! I'm your Sri Lanka travel guide. How can I help you plan your trip today?",
    },
  ]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Scroll to bottom of chat
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim()) return;

    // Add user message to chat
    const userMessage: Message = { role: "user", content: input };
    setMessages((prev) => [...prev, userMessage]);
    setInput("");
    setIsLoading(true);

    try {
      // Call OpenAI API
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          messages: [...messages, userMessage],
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to get response");
      }

      const data = await response.json();
      setMessages((prev) => [
        ...prev,
        { role: "assistant", content: data.content },
      ]);
    } catch (error) {
      console.error(error);
      toast.error("Failed to get response from travel guide");
      setMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          content:
            "Sorry, I'm having trouble responding. Please try again later.",
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  const exportChatToPDF = () => {
    const doc = new jsPDF();

    // Add title
    doc.setFontSize(18);
    doc.setTextColor(41, 128, 185);
    doc.text("Sri Lanka Travel Guide Chat", 105, 20, { align: "center" });

    // Add subtitle
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Chat exported on: ${new Date().toLocaleString()}`, 105, 28, {
      align: "center",
    });

    // Prepare data for the table
    const tableData = messages.map((message) => [
      message.role === "user" ? "You" : "Travel Guide",
      message.content,
      new Date().toLocaleTimeString(),
    ]);

    // Add table
    autoTable(doc, {
      head: [["Sender", "Message", "Time"]],
      body: tableData,
      startY: 40,
      styles: {
        fontSize: 10,
        cellPadding: 6,
        overflow: "linebreak",
      },
      headStyles: {
        fillColor: [41, 128, 185],
        textColor: 255,
        fontStyle: "bold",
      },
      columnStyles: {
        0: { cellWidth: 30 },
        1: { cellWidth: "auto" },
        2: { cellWidth: 30 },
      },
      alternateRowStyles: {
        fillColor: [245, 245, 245],
      },
      didDrawPage: function (data) {
        // Footer
        doc.setFontSize(10);
        doc.setTextColor(150);
        doc.text(
          "Generated by Sri Lanka Travel Guide",
          data.settings.margin.left,
          doc.internal.pageSize.height - 10
        );
      },
    });

    doc.save("sri-lanka-travel-chat.pdf");
  };

  return (
    <div className="flex flex-col h-[700px] w-full max-w-md bg-white/30 backdrop-blur-lg rounded-xl shadow-xl border border-white/20 overflow-hidden">
      {/* Chat header */}
      <div className="bg-white/40 p-4 border-b border-white/30 flex justify-between items-center">
        <div className="flex items-center gap-3">
          <div className="p-2 bg-blue-600/20 rounded-full">
            <Bot className="h-5 w-5 text-blue-600" />
          </div>
          <div>
            <h3 className="font-semibold text-gray-800">
              Sri Lanka Travel Guide
            </h3>
            <p className="text-xs text-gray-600">
              Ask me anything about traveling in Sri Lanka
            </p>
          </div>
        </div>
        <Button
          onClick={exportChatToPDF}
          variant="ghost"
          size="sm"
          className="text-gray-700 hover:bg-white/50"
          title="Export chat to PDF"
        >
          <Download className="h-4 w-4" />
        </Button>
      </div>

      {/* Chat messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message, index) => (
          <div
            key={index}
            className={`flex ${
              message.role === "user" ? "justify-end" : "justify-start"
            }`}
          >
            <div
              className={`max-w-[80%] rounded-lg p-3 ${
                message.role === "user"
                  ? "bg-blue-600/10 border border-blue-600/20"
                  : "bg-white/50 border border-white/30"
              }`}
            >
              <div className="flex items-start gap-2">
                {message.role === "user" ? (
                  <User className="h-4 w-4 mt-0.5 text-blue-600" />
                ) : (
                  <Bot className="h-4 w-4 mt-0.5 text-gray-700" />
                )}
                <p className="text-sm text-gray-800">{message.content}</p>
              </div>
            </div>
          </div>
        ))}
        {isLoading && (
          <div className="flex justify-start">
            <div className="max-w-[80%] rounded-lg p-3 bg-white/50 border border-white/30">
              <div className="flex items-center gap-2">
                <Bot className="h-4 w-4 text-gray-700" />
                <Loader2 className="h-4 w-4 animate-spin text-gray-700" />
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Chat input */}
      <form
        onSubmit={handleSubmit}
        className="p-4 border-t border-white/30 bg-white/20"
      >
        <div className="flex gap-2">
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Ask about places to visit, hotels, etc."
            className="flex-1 bg-white/70 border-white/30 text-gray-800 placeholder-gray-500"
            disabled={isLoading}
          />
          <Button
            type="submit"
            size="icon"
            className="bg-blue-600 hover:bg-blue-700"
            disabled={isLoading || !input.trim()}
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>
      </form>
    </div>
  );
}
